///////////////////////////////////////////////////////////////////////////////
// Module1.cpp
#include "TcPch.h"
#pragma hdrstop

#include "Module1.h"
#include "Module1Ads.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModule1
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModule1
BEGIN_INTERFACE_MAP(CModule1)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CModule1)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModule1)
IMPLEMENT_ITCADI(CModule1)
IMPLEMENT_ITCWATCHSOURCE(CModule1)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModule1 
BEGIN_SETOBJPARA_MAP(CModule1)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_Module1DefaultAdsPort, m_DefaultAdsPort)
	SETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	SETOBJPARA_VALUE(PID_Module1Counter, m_Counter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModule1 
BEGIN_GETOBJPARA_MAP(CModule1)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_Module1DefaultAdsPort, m_DefaultAdsPort)
	GETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	GETOBJPARA_VALUE(PID_Module1Counter, m_Counter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
	GETOBJPARA_TYPE_CODE(PID_Module1AdsPort, WORD, *p = AmsGetPort())
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModule1
BEGIN_OBJPARAWATCH_MAP(CModule1)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_Module1Counter, m_Counter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModule1
BEGIN_OBJDATAAREA_MAP(CModule1)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_Module1Inputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_Module1Outputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModule1::CModule1()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_DefaultAdsPort = 0;
	m_ContextAdsPort = 0;
	m_Counter = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
	for (int i = 0; i < 10; i++)
	{
		A_flag_[i] = false;
	}
	for (int i = 0; i < 3; i++)
	{
		C_ui_[i] = 0.0;
		C_s_ui_[i] = 0.0;
	}
	G_cnt_ = 0;
	L_cnt_ = 0;
	m_Outputs.M_o_elmo = 10;
	m_Inputs.M_D_ui = 10;
	m_Outputs.T_max_elmo = 500;
}

///////////////////////////////////////////////////////////////////////////////
CModule1::~CModule1() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModule1)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModule1::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = SUCCEEDED(hr) ? InitAmsPort(m_spSrv, m_DefaultAdsPort) : hr;

	// cleanup on failure
	if (FAILED(hr))
	{
		ShutdownAmsPort();
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModule1::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModule1::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModule1::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	ShutdownAmsPort();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModule1::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// handle pending ADS indications and confirmations
	CheckOrders();

	// TODO: Additional evaluation of input from ADS indication or confirmations

	// TODO: Submit your ADS requests 
	ULONGLONG cnt = 0;
	if (SUCCEEDED(ipTask->GetCycleCounter(&cnt)))
	{
		if (cnt%100 == 0)
		{
			SubmitAdsReadReq();
		}
	}
		// TODO: Replace the sample with your cyclic code
	
	//data conversion
	double P_elmo = m_Inputs.P_a_elmo / 20000.0 * 2 * PI;
	double V_elmo = m_Inputs.V_a_elmo / 20000.0 * 2 * PI;
	double T_elmo = m_Inputs.T_a_elmo[0] / 1000.0;
	double T_elmo_d = m_Inputs.T_a_elmo[1] / 1000.0;
	USHORT S_elmo =  m_Inputs.S_w_elmo & 111;
	double gTime = G_cnt_ / 1000.0;

	//GUI

	if (m_Outputs.M_o_elmo != m_Inputs.M_D_ui) {
		m_Inputs.Go_D_ui = false;
		A_flag_[1] = false;
		A_flag_[2] = false;
		C_ui_[0] = P_elmo;
		C_ui_[1] = 0.0;
	}
	m_Outputs.M_o_elmo = m_Inputs.M_D_ui;
	m_Outputs.M_s_ui = m_Outputs.M_o_elmo;

	float P_d = m_Inputs.C_D_ui[0];
	float V_d = m_Inputs.C_D_ui[1];
	float T_d = m_Inputs.C_D_ui[2];
	m_Outputs.C_s_ui[0] = (float)P_elmo;
	m_Outputs.C_s_ui[1] = (float)V_elmo;
	m_Outputs.C_s_ui[2] = (float)T_elmo;


	//STO 
	UINT Stoswitch = (m_Inputs.Di_elmo >> 3) & 0x00000001;
	if (Stoswitch != 1) {
		m_Inputs.S_D_ui = false;
	}
	//controlword generation
		if (S_elmo == 39) {
			m_Outputs.S_s_ui = true;
		}
		else { m_Outputs.S_s_ui = false; }

		if (m_Inputs.S_D_ui == true) {

			if (S_elmo == 0)
			{//not ready to switch on 
				//1

			}
			else if (S_elmo == 64 || S_elmo == 96) {
				//switch on disabled 
				// 2
				m_Outputs.C_w_elmo= 6;
			}
			else if (S_elmo == 33) {
				//ready to switch on
				//3
				m_Outputs.C_w_elmo = 7;
			}
			else if (S_elmo == 35) {
				//switch on
				//4
				m_Outputs.C_w_elmo = 15;
			}
			else if (S_elmo == 39) {
				//operation enabled
				//
				A_flag_[0] = true;
			}
			else if (S_elmo == 7) {
				//quick stop active
				//12
				m_Trace.Log(tlInfo, FENTERA, "Quick stop occur ");
				m_Outputs.C_w_elmo = 4;
			}
			else if (S_elmo == 15) {
				//fault reaction active
				//14
				m_Outputs.C_w_elmo = 4;

			}
			else if (S_elmo == 8) {
				//fault
				//15
				m_Outputs.C_w_elmo = 128;
			}
		}
		else {
			m_Outputs.C_w_elmo = 7;
		}

	//controller A_flag_[1] : Start motor A_Flag_[2] : P_d or P_elmo
		if (m_Inputs.Go_D_ui == true && A_flag_[1]==false) {
			//go first
			A_flag_[1] = true;
			A_flag_[2] = true;
			C_ui_[0] = P_d;
			C_ui_[1] = V_d;
			C_s_ui_[0] = (float)P_elmo;
			C_s_ui_[1] = (float)V_elmo;
			L_cnt_ = G_cnt_;
			m_Outputs.P_t_elmo = (long)(P_elmo * 10000.0 / PI);
			m_Outputs.V_t_elmo = (long)(V_elmo * 10000.0 / PI);

		}
		else if(m_Inputs.Go_D_ui == true && A_flag_[1] == true)
		{   

			double t0 = 2.0;
			double t = (G_cnt_ - L_cnt_) / 1000.0;
			double P_d_temp;
			double V_d_temp;

			//go motion
			if (t < t0) {
				P_d_temp = -2 * (C_ui_[0]- C_s_ui_[0]) / t0 / t0 / t0 * t * t * t + 3 * (C_ui_[0] - C_s_ui_[0]) / t0 / t0 * t * t+ C_s_ui_[0];
				V_d_temp = -2 * (C_ui_[1] - C_s_ui_[1]) / t0 / t0 / t0 * t * t * t + 3 * (C_ui_[1] - C_s_ui_[1]) / t0 / t0 * t * t + C_s_ui_[1];
			}
			else {
				P_d_temp = C_ui_[0];
				V_d_temp = C_ui_[1];
			}
			
			m_Outputs.P_t_elmo = (long)(P_d_temp * 10000.0 / PI);
			m_Outputs.V_t_elmo = (long)(V_d_temp * 10000.0 / PI);

			double P_e = C_ui_[0] - P_elmo;
			double V_e = C_ui_[1] - V_elmo;

			//motion reached A_flag_[1] = false,m_Inputs.Go_D_ui = false 
			if (m_Outputs.M_s_ui==8 && fabs_(P_e)<0.001)
			{
				A_flag_[1] = false;
				m_Inputs.Go_D_ui = false;
			}
			if (m_Outputs.M_s_ui == 9 && fabs_(V_e) < 0.01)
			{
				A_flag_[1] = false;
				m_Inputs.Go_D_ui = false;
			}
		}
		else if (m_Inputs.Go_D_ui == false && A_flag_[1] == false)
		{
			//current state 
			m_Outputs.P_t_elmo = (long)(C_ui_[0] * 10000.0 / PI);
			m_Outputs.V_t_elmo = (long)(C_ui_[1] * 10000.0 / PI);
		}
		else {
			//default
			m_Outputs.P_t_elmo = (long)(C_ui_[0] * 10000.0 / PI);
			m_Outputs.V_t_elmo = (long)(C_ui_[1] * 10000.0 / PI);
		}

		m_Outputs.T_t_elmo = (int)(T_d * 1000.0);

	//cnt
	G_cnt_++;

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CModule1::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModule1::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CModule1::AdsReadWriteInd
(
	AmsAddr& rAddr, 
	ULONG invokeId, 
	ULONG indexGroup,
	ULONG indexOffset, 
	ULONG cbReadLength, 
	ULONG cbWriteLength, 
	PVOID pData 
)
{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, indexGroup=0x%08x, indexOffset=0x%08x, cbReadLength=%d, cbWriteLength=%d, pData=0x%p",
		m_objId.value, invokeId, indexGroup, indexOffset, cbReadLength, cbWriteLength, pData);

	switch(indexGroup)
	{
	case Module1IndexGroup1:
		switch(indexOffset)
		{

		case Module1IndexOffset1:
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
				m_objId.value, indexGroup, indexOffset );

			// TODO: add custom code here

			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
			break;

		case Module1IndexOffset2:
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
				m_objId.value, indexGroup, indexOffset );

			// TODO: add custom code here

			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
			break;
		}
		break;
	case Module1IndexGroup2:
		switch(indexOffset)
		{

		case Module1IndexOffset1:
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
				m_objId.value, indexGroup, indexOffset );

			// TODO: add custom code here

			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
			break;

		case Module1IndexOffset2:
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
				m_objId.value, indexGroup, indexOffset );

			// TODO: add custom code here

			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
			break;
		}
		break;
	default:
		__super::AdsReadWriteInd(rAddr, invokeId, indexGroup, indexOffset, cbReadLength, cbWriteLength, pData); 
		break;
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}


void CModule1::SubmitAdsReadReq()
{
	m_Trace.Log(tlVerbose, FENTERA);
	// m_ContextAdsPort contains the ADS port number of the task associated with context 1
	// amsAddr refers to the ADS port of this task 
	AmsAddr amsAddr(this->AmsGetNetId(), m_ContextAdsPort);

	// Request the value of a parameter from a TwinCAT module instance
	// via the task ADS port.
	// The object id of the instance is passed as index group and
	// the parameter id is passed as index offset.
	// The result is delivered by a call to AdsReadCon and can 
	// be identified by the invoke id. 
	int nRes = 
		AdsReadReq
		(
			amsAddr, 
			invokeIdReadByOidAndPid, 
			m_objId.value, 
			PID_Module1Counter,
			sizeof(m_ReadByOidAndPid)
		);
	if (nRes != ADSERR_NOERR)
	{
		m_Trace.Log(tlError, FNAMEA "AdsReadReq failed with error=0x%08x(%s)", nRes, AdsGetErrorText(nRes));
	}
	else
	{
		m_Trace.Log(tlInfo, FNAMEA "AdsReadReq by oid=0x%08x and pid=0x%08x", m_objId.value, PID_Module1AdsPort);
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CModule1::AdsReadCon
(
	AmsAddr& rAddr,
	ULONG invokeId,
	ULONG nResult,
	ULONG cbLength,
	PVOID pData
)
{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, nResult=0x%08x, cbLength=%d, pData=0x%p",
		m_objId.value, invokeId, nResult, cbLength, pData);

	if (invokeId == invokeIdReadByOidAndPid)
	{
		if (nResult != ADSERR_NOERR)
		{
			m_Trace.Log(tlWarning, FNAMEA "ReadByOidAndPid failed with error=0x%x(%s)",
				nResult, AdsGetErrorText(nResult));
		}
		else if (cbLength == sizeof(m_ReadByOidAndPid))
		{
			m_ReadByOidAndPid = *static_cast<PULONG>(pData); 
			m_Trace.Log(tlInfo, FNAMEA "m_ReadByOidAndPid=0x%x", m_ReadByOidAndPid);
		}
	}
	else
	{
		__super::AdsReadWriteCon( rAddr, invokeId, nResult, cbLength, pData );
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

